<rule name="git_branch_and_commit_style">
  ## Branch Naming
  Always name branches using the format:
    <type>/<short-description>

  - <type> must be one of:
      feat  → new feature
      fix   → bug fix
      refactor → code refactoring
      chore → tooling, CI/CD, dependencies, configs
      docs  → documentation only
      test  → tests only
      perf  → performance improvements

  - <short-description>:
      * All lowercase
      * Words separated by hyphens
      * Concise but descriptive (3–5 words ideally)
      * No issue numbers, dates, or uppercase letters

  Examples:
    feat/login-button
    fix/crash-on-empty-upload
    refactor/db-query-builder
    chore/update-ci-workflow
    docs/api-authentication-guide

  ## Commit Messages
  Follow Conventional Commits format:
    <type>(scope): <summary>

    [body]

    [footer]

  - The <type> in the commit message must match the <type> in the branch name.
  - Use the <short-description> from the branch to decide on the <scope> or
    guide the <summary>.
  - Subject line ≤ 50 chars, imperative mood.
  - Wrap body at 72 chars.
  - Body explains "what + why", not just the diff.
  - Footer for BREAKING CHANGE or issue refs.

  ## Examples
  Branch: feat/login-button
  Commit: feat(ui): add login button component

  Branch: fix/crash-on-empty-upload
  Commit: fix(upload): prevent crash on empty file uploads

  Branch: chore/update-ci-workflow
  Commit: chore(ci): update GitHub Actions workflow to cache deps
</rule>

<rule name="prettier_formatting_standards">
# Prettier Code Formatting Standards

All code must follow Prettier formatting standards for consistency and professional appearance.

## HTML
- 2-space indentation
- Self-closing tags with trailing slash (e.g., `<meta charset="UTF-8" />`)
- Multi-line attributes: each attribute on separate line when exceeding line length
- Opening tag bracket `>` stays at end of last attribute line (not on separate line)
- Block comments properly indented with `<!-- ... -->` format
- No trailing spaces, proper line endings

## JavaScript/TypeScript  
- 2-space indentation
- Semicolons required
- Trailing commas in objects and arrays
- Single quotes for strings (except when avoiding escapes)
- Line length limit: 80-100 characters
- Proper spacing around operators and function parameters

## CSS
- 2-space indentation
- Properties sorted logically (not alphabetically)
- Trailing semicolons required
- Space after colons in property declarations
- Consistent spacing in selectors

## Configuration
- Use Prettier defaults where possible
- Override only when necessary for project requirements
- Ensure all team members use same Prettier version and config
</rule>

<rule name="claude_editing_rules_js_ts">
# Claude Editing Rules (JS/TS)

## General
- Prefer clarity over cleverness. Small, readable functions.
- Apply Prettier-compatible formatting (2 spaces, LF, trailing commas, semicolons).
- Use strict equality (===/!==). No implicit coercion.
- Prefer const; use let only when reassigned. Never use var.
- Remove dead code and unused imports/vars (unless prefixed with _).
- No TODOs without owner and date: // TODO(bob, YYYY-MM-DD): message

## Commenting
- Use JSDoc /** ... */ for:
  - Module/file headers summarizing purpose, invariants, and assumptions.
  - Public functions/types: @param, @returns, @throws, @example.
  - Data shapes (typedef/interface).
- Use // single-line comments only for brief local context.
- Comments must explain WHY, not re-state WHAT the code does.
- Link issues/PRDs in comments when relevant.
- Prohibit redundant comments (that narrate obvious code).

## Naming & Files
- camelCase for vars/functions; PascalCase for classes/types; UPPER_SNAKE for const enums.
- File names: kebab-case for modules; keep types near usage or in *.d.ts when shared.

## Arrays of Object Literals
- Provide a schema type (TypeScript interface or JSDoc @typedef).
- Keep object keys in stable order; one object per line with trailing commas.
- If there are constraints (e.g., allowed ranges), document them in JSDoc and validate when feasible.

## JS/TS Type Discipline
- Avoid any. Narrow types; prefer union/literal types.
- In JS, use JSDoc typedefs & @type annotations to describe shapes.
- Never export untyped objects for public consumption.

## Error Handling
- Don't swallow errors. Either handle explicitly or propagate with context.
- Add error messages that include actionable context (ids, counts, thresholds).

## Output Requirements (Claude)
- Ensure code is formatted as Prettier would output.
- Ensure it passes the repo ESLint config.
- Maintain/insert JSDoc on public APIs and non-trivial modules.
- Preserve existing comments; improve them only if clarity increases.
- Return only changed files' contents; no extra prose unless asked.

## Example Templates (use when applicable)
- Function JSDoc:
  /**
   * <what/why in one sentence>
   * @param {Type} name - purpose
   * @returns {Type} description
   * @throws {Error} when <condition>
   * @example
   *   const x = fn(arg);
   */
- Type JSDoc (JS):
  /**
   * @typedef {Object} Song
   * @property {string} name
   * @property {string} artist
   * @property {number} year - 1980–1989 inclusive.
   */

# See CLAUDE.md for rationale and extended examples.
</rule>
